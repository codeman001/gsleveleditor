// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h

typedef double lua_Number;
typedef unsigned char u8; 
typedef signed char s8; 
typedef char c8; 
typedef unsigned short u16;
typedef signed short s16; 
typedef unsigned int u32;
typedef signed int s32; 
typedef float f32; 
typedef double f64; 

namespace irr
{
namespace core
{

//! Quaternion class. 
class quaternion
{

		//! Default Constructor
		quaternion();

		//! Constructor
		quaternion(f32 X, f32 Y, f32 Z, f32 W);

		//! Constructor which converts euler angles to a quaternion
		quaternion(f32 x, f32 y, f32 z);

		//! Constructor which converts a matrix to a quaternion
		quaternion(matrix4& mat);

		//! equal operator
		bool operator==(quaternion& other) ;

		//! assignment operator
		//quaternion& operator=(quaternion& other);

		//! matrix assignment operator
		//quaternion& operator=(matrix4& other);

		//! add operator
		quaternion operator+(quaternion& other) ;

		//! multiplication operator
		quaternion operator*(quaternion& other) ;

		//! multiplication operator
		quaternion operator*(f32 s) ;

		//! multiplication operator
		//quaternion& operator*=(f32 s);

		//! multiplication operator
		//vector3d<f32> quaternion::operator* (vector3d<f32>& v) ;

		//! multiplication operator
		//quaternion& operator*=(quaternion& other);

		//! calculates the dot product
		f32 dotProduct(quaternion& other) ;

		//! sets new quaternion 
		void set(f32 x, f32 y, f32 z, f32 w);

		//! sets new quaternion based on euler angles
		void set(f32 x, f32 y, f32 z);

		//! normalizes the quaternion
		quaternion& normalize();

		//! Creates a matrix from this quaternion
		matrix4 getMatrix() ;

		//! Inverts this quaternion
        void makeInverse();

		//! Interpolates the quaternion between to quaternions based on time
		quaternion slerp(quaternion q1, quaternion q2, f32 time);

		//! axis must be unit length 
		//! The quaternion representing the rotation is 
		//!  q = cos(A/2)+sin(A/2)*(x*i+y*j+z*k) 
		void fromAngleAxis(f32 angle, vector3d<f32>& axis);

		void toEuler(vector3d<f32>& euler);

		f32 X,Y,Z,W;
};



} // end namespace core
} // end namespace irr


