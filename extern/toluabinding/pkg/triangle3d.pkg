// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h

typedef double lua_Number;
typedef unsigned char u8; 
typedef signed char s8; 
typedef char c8; 
typedef unsigned short u16;
typedef signed short s16; 
typedef unsigned int u32;
typedef signed int s32; 
typedef float f32; 
typedef double f64; 

namespace irr
{
namespace core
{
	
	//! 3d triangle template class for doing collision detection and other things.
//	template <class T>
	class triangle3d  
	{
		TOLUA_TEMPLATE_BIND(T, f32)

		triangle3d();
		~triangle3d();
		//! Determinates if the triangle is totally inside a bounding box.
		//! \param box: Box to check.
		//! \return Returns true if the triangle is withing the box,
		//! and false if it is not.
		bool isTotalInsideBox(irr::core::aabbox3d<T>& box) ;
		

		bool operator==(triangle3d<T>& other) ;
	//	bool operator!=(triangle3d<T>& other) ;

		//! Returns the closest point on a triangle to a point on the same plane.
		//! \param p: Point which must be on the same plane as the triangle.
		irr::core::vector3d<T> closestPointOnTriangle(irr::core::vector3d<T>& p) ;

		//! Returns if a point is inside the triangle
		//! \param p: Point to test. Assumes that this point is already on the plane
		//! of the triangle.
		//! \return Returns true if the point is inside the triangle, otherwise false.
		bool isPointInside(irr::core::vector3d<T>& p) ;

		//! Returns if a point is inside the triangle. This method is an implementation
		//! of the example used in a paper by Kasper Fauerby original written
		//! by Keidy from Mr-Gamemaker.
		//! \param p: Point to test. Assumes that this point is already on the plane
		//! of the triangle.
		//! \return Returns true if the point is inside the triangle, otherwise false.
		bool isPointInsideFast(irr::core::vector3d<T>& p) ;			


		//! Returns an intersection with a 3d line.
		//! \param lineVect: Vector of the line to intersect with.
		//! \param linePoint: Point of the line to intersect with.
		//! \param outIntersection: Place to store the intersection point, if there is one.
		//! \return Returns true if there was an intersection, false if there was not.
		bool getIntersectionWithLimitedLine(irr::core::line3d<T>& line, irr::core::vector3d<T>& outIntersection) ;

		//! Returns an intersection with a 3d line.
		//! Please note that also points are returned as intersection, which
		//! are on the line, but not between the start and end point of the line.
		//! If you want the returned point be between start and end, please
		//! use getIntersectionWithLimitedLine().
		//! \param lineVect: Vector of the line to intersect with.
		//! \param linePoint: Point of the line to intersect with.
		//! \param outIntersection: Place to store the intersection point, if there is one.
		//! \return Returns true if there was an intersection, false if there was not.
		bool getIntersectionWithLine(irr::core::vector3d<T>& linePoint, irr::core::vector3d<T>& lineVect, irr::core::vector3d<T>& outIntersection) ;

		//! Calculates the intersection between a 3d line and 
		//! the plane the triangle is on.
		//! \param lineVect: Vector of the line to intersect with.
		//! \param linePoint: Point of the line to intersect with.
		//! \param outIntersection: Place to store the intersection point, if there is one.
		//! \return Returns true if there was an intersection, false if there was not.
		bool getIntersectionOfPlaneWithLine(irr::core::vector3d<T>& linePoint, irr::core::vector3d<T>& lineVect, irr::core::vector3d<T>& outIntersection) ;
		
		//! Returns the normal of the triangle.
		//! Please note: The normal is not normalized.
		irr::core::vector3d<T> getNormal() ;

		//! Returns if the triangle is front of backfacing.
		//! \param lookDirection: Look direction.
		//! \return Returns true if the plane is front facing, which mean it would
		//! be visible, and false if it is backfacing.
		bool isFrontFacing(irr::core::vector3d<T>& lookDirection) ;

		//! Returns the plane of this triangle.
		irr::core::plane3d<T> getPlane() ;

		void set(irr::core::vector3d<T>& a, irr::core::vector3d<T>& b, irr::core::vector3d<T>& c);

		//! the three points of the triangle
		irr::core::vector3d<T> pointA; 
		irr::core::vector3d<T> pointB; 
		irr::core::vector3d<T> pointC; 
	};


	//! Typedef for a f32 3d triangle.
	//typedef triangle3d<f32> triangle3d<f32>;

	//! Typedef for an integer 3d triangle.
	//typedef triangle3d<s32> triangle3di;

} // end namespace core
} // end namespac irr


$[

irr.core.triangle3d = irr.core.triangle3d_f32_

$]

