// Copyright (C) 2005-2006 Josh Turpen, Nikolaus Gebhardt
// This file is part of the IrrLua Lua binding for Irrlicht.
// For conditions of distribution and use, see copyright notice in IrrLua.h

typedef double lua_Number;
typedef unsigned char u8; 
typedef signed char s8; 
typedef char c8; 
typedef unsigned short u16;
typedef signed short s16; 
typedef unsigned int u32;
typedef signed int s32; 
typedef float f32; 
typedef double f64; 

namespace irr
{
namespace core
{

//! Enumeration for intersection relations of 3d objects

enum EIntersectionRelation3D 
{
	ISREL3D_FRONT = 0,
	ISREL3D_BACK,
	ISREL3D_PLANAR,
	ISREL3D_SPANNING,
	ISREL3D_CLIPPED
};


//! Template plane class with some intersection testing methods.
//template <class T>
class plane3d
{
		TOLUA_TEMPLATE_BIND(T, f32)

		// Constructors

		plane3d();
		
		plane3d( irr::core::vector3d<T>& MPoint,  irr::core::vector3d<T>& Normal);
		plane3d(T px, T py, T pz, T nx, T ny, T nz);
		plane3d( plane3d<T>& other);
		plane3d( irr::core::vector3d<T>& point1,  irr::core::vector3d<T>& point2,  irr::core::vector3d<T>& point3);

		// operators

		inline bool operator==( plane3d<T>& other) ;
		//inline bool operator!=( plane3d<T>& other) ;

		// functions

		void setPlane( irr::core::vector3d<T>& point,  irr::core::vector3d<T>& nvector);

		void setPlane( irr::core::vector3d<T>& nvect, T d);

		void setPlane( irr::core::vector3d<T>& point1,  irr::core::vector3d<T>& point2,  irr::core::vector3d<T>& point3);


		//! Returns an intersection with a 3d line.
		//! \param lineVect: Vector of the line to intersect with.
		//! \param linePoint: Point of the line to intersect with.
		//! \param outIntersection: Place to store the intersection point, if there is one.
		//! \return Returns true if there was an intersection, false if there was not.
		bool getIntersectionWithLine( irr::core::vector3d<T>& linePoint,  irr::core::vector3d<T>& lineVect, irr::core::vector3d<T>& outIntersection) ;

		//! Returns where on a line between two points an intersection with this plane happened.
		//! Only useful if known that there is an intersection.
		//! \param linePoint1: Point1 of the line to intersect with.
		//! \param linePoint2: Point2 of the line to intersect with.
		//! \return Returns where on a line between two points an intersection with this plane happened.
		//! For example, 0.5 is returned if the intersection happened exectly in the middle of the two points.
		f32 getKnownIntersectionWithLine( irr::core::vector3d<T>& linePoint1,  irr::core::vector3d<T>& linePoint2) ;

		//! Returns an intersection with a 3d line, limited between two 3d points.
		//! \param linePoint1: Point 1 of the line.
		//! \param linePoint2: Point 2 of the line.
		//! \param outIntersection: Place to store the intersection point, if there is one.
		//! \return Returns true if there was an intersection, false if there was not.
		bool getIntersectionWithLimitedLine( irr::core::vector3d<T>& linePoint1,  irr::core::vector3d<T>& linePoint2, irr::core::vector3d<T>& outIntersection) ;

		//! Classifies the relation of a point to this plane.
		//! \param point: Point to classify its relation.
		//! \return Returns ISREL3D_FRONT if the point is in front of the plane,
		//! ISREL3D_BACK if the point is behind of the plane, and
		//! ISREL3D_PLANAR if the point is within the plane.
		EIntersectionRelation3D classifyPointRelation( irr::core::vector3d<T>& point) ;

		//! Recalculates the distance from origin by applying
		//! a new member point to the plane.
		void recalculateD( irr::core::vector3d<T>& MPoint);

		//!\return Returns a member point of the plane.
		irr::core::vector3d<T> getMemberPoint() ;

		//! Tests if there is a intersection between this plane and another
		//! \return Returns true if there is a intersection.
		bool existsIntersection( plane3d<T>& other) ;

		//! Intersects this plane with another.
		//! \return Returns true if there is a intersection, false if not.
		bool getIntersectionWithPlane( plane3d<T>& other, irr::core::vector3d<T>& outLinePoint, irr::core::vector3d<T>& outLineVect) ;

		//! Returns the intersection point with two other planes if there is one.
		bool getIntersectionWithPlanes( plane3d<T>& o1,  plane3d<T>& o2, irr::core::vector3d<T>& outPoint) ;

		//! Returns if the plane is front of backfacing. Note that this only
		//! works if the normal is Normalized.
		//! \param lookDirection: Look direction.
		//! \return Returns true if the plane is front facing, which mean it would
		//! be visible, and false if it is backfacing.
		bool isFrontFacing( irr::core::vector3d<T>& lookDirection) ;

		//! Returns the distance to a point.  Note that this only
		//! works if the normal is Normalized.
		T getDistanceTo( irr::core::vector3d<T>& point) ;
	
		// member variables
		
		irr::core::vector3d<T> Normal;		// normal vector
		T D;					// distance from origin
		
};


//! Typedef for a f32 3d plane.
//typedef plane3d<f32> plane3df;
//! Typedef for an integer 3d plane.
//typedef plane3d<s32> plane3di;

} // end namespace core
} // end namespace irr

$[

irr.core.plane3d = irr.core.plane3d_f32_

$]


